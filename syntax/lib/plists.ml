let ocaml = {|<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ml</string>
	</array>
	<key>name</key>
	<string>OCaml</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#directives</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#characters</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#attributes</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#extensions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#signatures</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#bindings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keywords</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operators</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#literals</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#types</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#identifiers</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>attributes</key>
		<dict>
			<key>begin</key>
			<string>\[(@|@@|@@@)[[:space:]]*([[:alpha:]_]+(\.[[:word:]']+)*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.attribute.ocaml</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.attribute.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>keyword.other.ocaml punctuation.other.period punctuation.separator.period</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>bindings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.binding.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>for loop</string>
					<key>match</key>
					<string>\b(for)[[:space:]]+([[:lower:]_][[:word:]']*)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>local open/exception/module</string>
					<key>match</key>
					<string>\b(let)[[:space:]]+(open|exception|module)\b(?!')</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.binding.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>let expression</string>
					<key>match</key>
					<string>\b(let)[[:space:]]+(?!lazy\b(?!'))(rec[[:space:]]+)?([[:lower:]_][[:word:]']*)[[:space:]]+(?!,|::)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.binding.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>using binding operators</string>
					<key>match</key>
					<string>\b(let|and)([$&amp;*+\-/=&gt;@^|&lt;][!?$&amp;*+\-/=&gt;@^|%:]*)[[:space:]]*(?!lazy\b(?!'))([[:lower:]_][[:word:]']*)[[:space:]]+(?!,|::)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>comment</key>
					<string>first class module packing</string>
					<key>match</key>
					<string>\([[:space:]]*(val)[[:space:]]+([[:lower:]_][[:word:]']*)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml punctuation.other.colon punctuation.colon</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.ocaml</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.binding.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>locally abstract types</string>
					<key>match</key>
					<string>(?:\(|(:))[[:space:]]*(type)((?:[[:space:]]+[[:lower:]_][[:word:]']*)+)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\?)\([[:space:]]*([[:lower:]_][[:word:]']*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.optional.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.optional.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>optional labeled argument with type</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(~)\([[:space:]]*([[:lower:]_][[:word:]']*)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.labeled.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.labeled.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>labeled argument with type</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>source.ocaml.interface#bindings</string>
				</dict>
			</array>
		</dict>
		<key>characters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from escaped backslash</string>
					<key>match</key>
					<string>'(\\\\)'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from escaped quote or whitespace</string>
					<key>match</key>
					<string>'(\\["'ntbr ])'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from decimal ASCII code</string>
					<key>match</key>
					<string>'(\\[[:digit:]]{3})'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from hexadecimal ASCII code</string>
					<key>match</key>
					<string>'(\\x[[:xdigit:]]{2})'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from octal ASCII code</string>
					<key>match</key>
					<string>'(\\o[0-3][0-7]{2})'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.unknown-escape.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>character literal from unknown escape sequence</string>
					<key>match</key>
					<string>'(\\.)'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>character literal</string>
					<key>match</key>
					<string>'.'</string>
					<key>name</key>
					<string>string.quoted.other.ocaml constant.character.ocaml</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>empty comment</string>
					<key>match</key>
					<string>\(\*\*\)</string>
					<key>name</key>
					<string>comment.block.ocaml</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(\*\*</string>
					<key>comment</key>
					<string>ocamldoc comment</string>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.doc.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.ocaml.ocamldoc#markup</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings-in-comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(\*</string>
					<key>comment</key>
					<string>block comment</string>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.block.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#strings-in-comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>directives</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^[[:space:]]*(#)[[:space:]]*([[:digit:]]+)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.integer.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>line number directive</string>
					<key>contentName</key>
					<string>comment.line.directive.ocaml</string>
					<key>end</key>
					<string>$</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^[[:space:]]*(#)[[:space:]]*(require|list|camlp4o|camlp4r|predicates|thread)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>topfind directives</string>
					<key>end</key>
					<string>$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^[[:space:]]*(#)[[:space:]]*(define|undef|ifdef|ifndef|if|else|elif|endif|include|warning|error|ext|endext)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>cppo directives</string>
					<key>end</key>
					<string>$</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(defined)\b</string>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\</string>
							<key>name</key>
							<string>keyword.other.ocaml</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#characters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#keywords</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#operators</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#literals</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#types</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#identifiers</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>extensions</key>
		<dict>
			<key>begin</key>
			<string>\[(%|%%)[[:space:]]*([[:alpha:]_]+(\.[[:word:]']+)*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.extension.ocaml</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.extension.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>keyword.other.ocaml punctuation.other.period punctuation.separator.period</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>identifiers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>capital identifier for constructor, exception, or module</string>
					<key>match</key>
					<string>\b[[:upper:]][[:word:]']*('|\b)</string>
					<key>name</key>
					<string>constant.language.capital-identifier.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>lowercase identifier</string>
					<key>match</key>
					<string>\b[[:lower:]_][[:word:]']*('|\b)</string>
					<key>name</key>
					<string>source.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>polymorphic variant tag</string>
					<key>match</key>
					<string>\`[[:alpha:]][[:word:]']*\b</string>
					<key>name</key>
					<string>constant.language.polymorphic-variant.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>empty list (can be used as a constructor)</string>
					<key>match</key>
					<string>\[\]</string>
					<key>name</key>
					<string>constant.language.ocaml strong</string>
				</dict>
			</array>
		</dict>
		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>reserved ocaml keyword</string>
					<key>match</key>
					<string>\b(and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|virtual|when|while|with)\b(?!')</string>
					<key>name</key>
					<string>keyword.other.ocaml</string>
				</dict>
			</array>
		</dict>
		<key>literals</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>wildcard underscore</string>
					<key>match</key>
					<string>\b_\b</string>
					<key>name</key>
					<string>constant.language.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>boolean literal</string>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating point decimal literal with exponent</string>
					<key>match</key>
					<string>\b([[:digit:]][[:digit:]_]*(\.[[:digit:]_]*)?[eE][+-]?[[:digit:]][[:digit:]_]*[g-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.decimal.float.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating point decimal literal</string>
					<key>match</key>
					<string>\b([[:digit:]][[:digit:]_]*\.[[:digit:]_]*[g-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.decimal.float.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating point hexadecimal literal with exponent part</string>
					<key>match</key>
					<string>\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*(\.[[:xdigit:]_]*)?[pP][+-]?[[:digit:]][[:digit:]_]*[g-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.hexadecimal.float.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>floating point hexadecimal literal</string>
					<key>match</key>
					<string>\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*\.[[:xdigit:]_]*[g-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.hexadecimal.float.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>decimal integer literal</string>
					<key>match</key>
					<string>\b([[:digit:]][[:digit:]_]*[lLng-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.decimal.integer.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>hexadecimal integer literal</string>
					<key>match</key>
					<string>\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*[lLng-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.hexadecimal.integer.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>octal integer literal</string>
					<key>match</key>
					<string>\b((0o|0O)[0-7][0-7_]*[lLng-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.octal.integer.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>binary integer literal</string>
					<key>match</key>
					<string>\b((0b|0B)[0-1][0-1_]*[lLng-zG-Z]?)\b</string>
					<key>name</key>
					<string>constant.numeric.binary.integer.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>unit literal</string>
					<key>match</key>
					<string>\(\)</string>
					<key>name</key>
					<string>constant.language.ocaml strong</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>comment</key>
					<string>parentheses</string>
					<key>end</key>
					<string>\)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>empty array</string>
					<key>match</key>
					<string>\[\|\|\]</string>
					<key>name</key>
					<string>constant.language.ocaml strong</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[\|</string>
					<key>comment</key>
					<string>array</string>
					<key>end</key>
					<string>\|\]</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>empty list</string>
					<key>match</key>
					<string>\[\]</string>
					<key>name</key>
					<string>constant.language.ocaml strong</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>comment</key>
					<string>list</string>
					<key>end</key>
					<string>]</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>binding operator</string>
					<key>match</key>
					<string>\b(let|and)[$&amp;*+\-/=&gt;@^|&lt;][!?$&amp;*+\-/=&gt;@^|%:]*</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>infix symbol</string>
					<key>match</key>
					<string>[$&amp;*+\-/=&gt;@^%&lt;][~!?$&amp;*+\-/=&gt;@^|%&lt;:.]*</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>infix symbol that begins with vertical bar</string>
					<key>match</key>
					<string>\|[~!?$&amp;*+\-/=&gt;@^|%&lt;:.]+</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>vertical bar</string>
					<key>match</key>
					<string>(?&lt;!\[)(\|)(?!\])</string>
					<key>name</key>
					<string>keyword.other.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>infix symbol</string>
					<key>match</key>
					<string>#[~!?$&amp;*+\-/=&gt;@^|%&lt;:.]+</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>prefix symbol</string>
					<key>match</key>
					<string>![~!?$&amp;*+\-/=&gt;@^|%&lt;:.]*</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>prefix symbol</string>
					<key>match</key>
					<string>[?~][~!?$&amp;*+\-/=&gt;@^|%&lt;:.]+</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>named operator</string>
					<key>match</key>
					<string>\b(or|mod|land|lor|lxor|lsl|lsr|asr)\b</string>
					<key>name</key>
					<string>keyword.operator.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>method invocation</string>
					<key>match</key>
					<string>#</string>
					<key>name</key>
					<string>keyword.other.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>type annotation</string>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>keyword.other.ocaml punctuation.other.colon punctuation.colon</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>field accessor</string>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.other.ocaml punctuation.other.period punctuation.separator.period</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>semicolon separator</string>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>keyword.other.ocaml punctuation.separator.terminator punctuation.separator.semicolon</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>comma separator</string>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>keyword.other.ocaml punctuation.comma punctuation.separator.comma</string>
				</dict>
			</array>
		</dict>
		<key>signatures</key>
		<dict>
			<key>begin</key>
			<string>\b(sig)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.ocaml</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\b(end)\b</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.ocaml</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>source.ocaml.interface</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{(%%?[[:alpha:]_][[:word:]']*(\.[[:alpha:]_][[:word:]']*)*[[:space:]]*)?[[:lower:]_]*\|</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.extension.ocaml</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>quoted string literal</string>
					<key>end</key>
					<string>\|[[:lower:]_]*\}</string>
					<key>name</key>
					<string>string.quoted.braced.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>comment</key>
					<string>string literal</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.ocaml</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>escaped newline</string>
							<key>match</key>
							<string>\\$</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>escaped backslash</string>
							<key>match</key>
							<string>\\\\</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>escaped quote or whitespace</string>
							<key>match</key>
							<string>\\["'ntbr ]</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>character from decimal ASCII code</string>
							<key>match</key>
							<string>\\[[:digit:]]{3}</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>character from hexadecimal ASCII code</string>
							<key>match</key>
							<string>\\x[[:xdigit:]]{2}</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>character from octal ASCII code</string>
							<key>match</key>
							<string>\\o[0-3][0-7]{2}</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>unicode character escape sequence</string>
							<key>match</key>
							<string>\\u\{[[:xdigit:]]{1,6}\}</string>
							<key>name</key>
							<string>constant.character.escape.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>printf format string</string>
							<key>match</key>
							<string>%[-0+ #]*([[:digit:]]+|\*)?(.([[:digit:]]+|\*))?[lLn]?[diunlLNxXosScCfFeEgGhHBbat!%@,]</string>
							<key>name</key>
							<string>constant.character.printf.ocaml</string>
						</dict>
						<dict>
							<key>comment</key>
							<string>unknown escape sequence</string>
							<key>match</key>
							<string>\\.</string>
							<key>name</key>
							<string>invalid.illegal.unknown-escape.ocaml</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strings-in-comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>char literal</string>
					<key>match</key>
					<string>'(\\)?.'</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>comment</key>
					<string>string literal</string>
					<key>end</key>
					<string>"</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\{[^|]*\|</string>
					<key>comment</key>
					<string>quoted string literal</string>
					<key>end</key>
					<string>\|[^}]*\}</string>
				</dict>
			</array>
		</dict>
		<key>types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>type parameter</string>
					<key>match</key>
					<string>'[[:alpha:]][[:word:]']*\b</string>
					<key>name</key>
					<string>storage.type.ocaml</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>builtin type</string>
					<key>match</key>
					<string>\b(unit|bool|int|int32|int64|nativeint|float|char|bytes|string)\b</string>
					<key>name</key>
					<string>support.type.ocaml</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ocaml</string>
</dict>
</plist>
|}

let dune = {|<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>dune</string>
		<string>jbuild</string>
	</array>
	<key>name</key>
	<string>dune</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(library|rule|executable|executables|rule|ocamllex|ocamlyacc|menhir|install|alias|copy_files|copy_files#|jbuild_version|include)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.class.stanza.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(name|public_name|synopsis|install_c_headers|ppx_runtime_libraries|c_flags|cxx_flags|c_names|cxx_names|library_flags|c_library_flags|virtual_deps|modes|kind|wrapped|optional|self_build_stubs_archive|no_dynlink|ppx\.driver)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.library.field.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(targets|deps|locks|loc|mode|action)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.rule.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\([[:space:]]*(fallback|optional)[[:space:]]*\)</string>
			<key>name</key>
			<string>meta.mono-sexp.dune</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(run|chdir|setenv|with-stdout-to|with-stderr-to|with-outputs-to|ignore-stdout|ignore-stderr|ignore-outputs|progn|echo|cat|copy|copy#|system|bash|write-file|diff|diff\?)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.action.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.rule.action.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(section)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.install.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(lib|libexec|bin|sbin|toplevel|share|share_root|etc|doc|stublibs|man|misc)\b</string>
					<key>name</key>
					<string>constant.language.rule.mode.dune</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(files)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.install.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(normal|ppx_deriver|ppx_rewriter)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.rule.mode.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.library.kind.dune</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(name|link_executables|link_flags|modes)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.executables.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(preprocess|preprocessor_deps|lint|modules|modules_without_implementation|libraries|flags|ocamlc_flags|ocamlopt_flags|js_of_ocaml|allow_overlapping_dependencies|per_module)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(no_preprocessing|action|pps)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.preprocess.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(file|alias|alias_rec|glob_files|files_recursively_in)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.preprocess_deps.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(select)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.libraries.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+\b</string>
			<key>name</key>
			<string>constant.numeric.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(true|false)</string>
			<key>name</key>
			<string>constant.language.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[[:space:]](as|from|-&gt;)[[:space:]]</string>
			<key>name</key>
			<string>keyword.other.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\!)</string>
			<key>name</key>
			<string>keyword.other.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(:\w+)\b</string>
			<key>name</key>
			<string>constant.language.flag.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(standard|fallback|promote|promote-until-then)\b</string>
			<key>name</key>
			<string>constant.language.rule.mode.dune</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#list</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#atom</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>atom</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b[^[[:space:]]]+\b</string>
					<key>name</key>
					<string>meta.atom.dune</string>
				</dict>
			</array>
		</dict>
		<key>comment-inner</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.sexp.inner.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-inner</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>#\|</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.dune</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\|#</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.dune</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>#;[[:space:]]*\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.sexp.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-inner</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>;.*$</string>
					<key>name</key>
					<string>comment.line.dune</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.tag.list.parenthesis.dune</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ok, for this one, I didn't know what to choose</string>
					<key>end</key>
					<string>(\))</string>
					<key>name</key>
					<string>meta.list.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[^\\])(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.dune</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.dune</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\"</string>
							<key>name</key>
							<string>constant.character.string.escape.dune</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\${[^}]*}</string>
					<key>name</key>
					<string>variable.other.dune</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.dune</string>
</dict>
</plist>
|}

let opam = {|<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>opam</string>
	</array>
	<key>name</key>
	<string>opam</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#fields</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#values</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(\*</string>
					<key>comment</key>
					<string>block comment</string>
					<key>end</key>
					<string>\*\)</string>
					<key>name</key>
					<string>comment.block.opam</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>#</string>
					<key>comment</key>
					<string>line comment</string>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>comment.line.opam</string>
				</dict>
			</array>
		</dict>
		<key>fields</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.opam</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.opam</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>labeled field</string>
			<key>match</key>
			<string>^([[:word:]-]*[[:alpha:]][[:word:]-]*)(:)</string>
		</dict>
		<key>string-elements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>escaped backslash</string>
					<key>match</key>
					<string>\\\\</string>
					<key>name</key>
					<string>constant.character.escape.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>escaped quote or whitespace</string>
					<key>match</key>
					<string>\\["ntbr\n]</string>
					<key>name</key>
					<string>constant.character.escape.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>character from decimal ASCII code</string>
					<key>match</key>
					<string>\\[[:digit:]]{3}</string>
					<key>name</key>
					<string>constant.character.escape.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>character from hexadecimal ASCII code</string>
					<key>match</key>
					<string>\\x[[:xdigit:]]{2}</string>
					<key>name</key>
					<string>constant.character.escape.opam</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>%\{</string>
					<key>comment</key>
					<string>variable interpolation</string>
					<key>end</key>
					<string>}\%</string>
					<key>name</key>
					<string>constant.variable.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>unknown escape sequence</string>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.opam</string>
				</dict>
			</array>
		</dict>
		<key>values</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>boolean literal</string>
					<key>match</key>
					<string>\b(true|false)\b</string>
					<key>name</key>
					<string>constant.language.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>integer literal</string>
					<key>match</key>
					<string>(\b|\-?)[[:digit:]]+\b</string>
					<key>name</key>
					<string>constant.numeric.decimal.opam</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>comment</key>
					<string>double-quote string literal</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.opam</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-elements</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"""</string>
					<key>comment</key>
					<string>triple-double-quote string literal</string>
					<key>end</key>
					<string>"""</string>
					<key>name</key>
					<string>string.quoted.triple-double.opam</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-elements</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>comment</key>
					<string>operator</string>
					<key>match</key>
					<string>[!=&lt;&gt;\|&amp;?:]+</string>
					<key>name</key>
					<string>keyword.operator.opam</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>identifier</string>
					<key>match</key>
					<string>\b([[:word:]+-]+)\b</string>
					<key>name</key>
					<string>variable.parameter.opam</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ocaml.opam</string>
</dict>
</plist>
|}

