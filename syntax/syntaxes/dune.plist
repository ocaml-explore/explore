<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>dune</string>
		<string>jbuild</string>
	</array>
	<key>name</key>
	<string>dune</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(library|rule|executable|executables|rule|ocamllex|ocamlyacc|menhir|install|alias|copy_files|copy_files#|jbuild_version|include)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.class.stanza.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(name|public_name|synopsis|install_c_headers|ppx_runtime_libraries|c_flags|cxx_flags|c_names|cxx_names|library_flags|c_library_flags|virtual_deps|modes|kind|wrapped|optional|self_build_stubs_archive|no_dynlink|ppx\.driver)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.library.field.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(targets|deps|locks|loc|mode|action)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.rule.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\([[:space:]]*(fallback|optional)[[:space:]]*\)</string>
			<key>name</key>
			<string>meta.mono-sexp.dune</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(run|chdir|setenv|with-stdout-to|with-stderr-to|with-outputs-to|ignore-stdout|ignore-stderr|ignore-outputs|progn|echo|cat|copy|copy#|system|bash|write-file|diff|diff\?)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.action.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.rule.action.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(section)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.install.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(lib|libexec|bin|sbin|toplevel|share|share_root|etc|doc|stublibs|man|misc)\b</string>
					<key>name</key>
					<string>constant.language.rule.mode.dune</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(files)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.install.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(normal|ppx_deriver|ppx_rewriter)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.rule.mode.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.library.kind.dune</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(name|link_executables|link_flags|modes)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.executables.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(preprocess|preprocessor_deps|lint|modules|modules_without_implementation|libraries|flags|ocamlc_flags|ocamlopt_flags|js_of_ocaml|allow_overlapping_dependencies|per_module)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(no_preprocessing|action|pps)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.preprocess.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(file|alias|alias_rec|glob_files|files_recursively_in)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.preprocess_deps.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\([[:space:]]*(select)[[:space:]]</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dune</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.stanza.lib-or-exec.buildable.libraries.dune</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d+\b</string>
			<key>name</key>
			<string>constant.numeric.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(true|false)</string>
			<key>name</key>
			<string>constant.language.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[[:space:]](as|from|-&gt;)[[:space:]]</string>
			<key>name</key>
			<string>keyword.other.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\!)</string>
			<key>name</key>
			<string>keyword.other.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(:\w+)\b</string>
			<key>name</key>
			<string>constant.language.flag.dune</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(standard|fallback|promote|promote-until-then)\b</string>
			<key>name</key>
			<string>constant.language.rule.mode.dune</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#list</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#atom</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>atom</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b[^[[:space:]]]+\b</string>
					<key>name</key>
					<string>meta.atom.dune</string>
				</dict>
			</array>
		</dict>
		<key>comment-inner</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.sexp.inner.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-inner</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>#\|</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.dune</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\|#</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.dune</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>#;[[:space:]]*\(</string>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>comment.sexp.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment-inner</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>;.*$</string>
					<key>name</key>
					<string>comment.line.dune</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.tag.list.parenthesis.dune</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ok, for this one, I didn't know what to choose</string>
					<key>end</key>
					<string>(\))</string>
					<key>name</key>
					<string>meta.list.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=[^\\])(")</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.dune</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.dune</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.dune</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\"</string>
							<key>name</key>
							<string>constant.character.string.escape.dune</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#variable</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\${[^}]*}</string>
					<key>name</key>
					<string>variable.other.dune</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.dune</string>
</dict>
</plist>
